# guard against multiple inclusions
$ifndef "mental_ray_fire_shader_included"
set "mental_ray_fire_shader_included" "true"

# Voxel density shader, reads voxelized data from a given file

declare shader
	scalar "voxel_density" (
		string "filename",
		integer "read_mode",
			#: default 1
			#: enum "ASCII Single Value:Binary Only Red:Binary Max RGB:ASCII Uintah"
		integer "interpolation_mode",
			#: default 1
			#: enum "None:Trilinear"
		scalar "scale",
			#: default 1.0
			#: softmin 0.0
			#: softmax 10000.0
		scalar "offset",
			#: default 0.0
			#: softmin 0.0
			#: softmax 100.0
		vector "min_point", 
			#: default -1 -1 -1
			#: hidden true
		vector "max_point", 
			#: default 1 1 1
			#: hidden true
			)
	version 1
end declare

# Voxel shader with intermediate rgb values

declare shader
	color "voxel_rgb_value" (
		shader "temperature_shader",
		shader "density_shader",
		integer "compute_mode",
			#: default 0
			#: enum "Black Body:Absorption"
		integer "interpolation_mode",
			#: default 1
			#: enum "None:Trilinear"
		scalar "visual_adaptation_factor",
			#: default 0.0
			#: min 0.0
			#: max 1.0
		integer "fuel_type",
			#: default 1
			#: enum "Black Body:Propane:Acetylene:Copper-Green:Sulfur-Purple"
		vector "min_point",
			#: default -1 -1 -1
			#: hidden true
		vector "max_point", 
			#: default 1 1 1
			#: hidden true
			)
	version 1
end declare

# Volumetric fire material

declare shader
		struct { 
			color "color",
			color "glowColor",
			color "matteOpacity",
			color "transparency"
		} "fire_volume" (
			color "color", 
				#: default 1 1 1 # For fake orange 0.9 0.2 0
				#: hidden true
			color "glowColor",
				#: default 0 0 0
				#: hidden true
			color "matteOpacity",
				#: default 1 1 1
				#: hidden true
			color "transparency",
				#: default 0.5 0.5 0.5
				#: hidden true
			shader "density_shader",
			shader "absorption_shader",
			string "density_file",
			string "density_file_first",
				#: hidden true
			scalar "density_scale",
				#: default 1e12 # As the density is in molecules, a large scale is needed
				#: softmin 0.0
				#: softmax 1e15
			scalar "density_offset",
				#: default 0
				#: softmin 0.0
				#: softmax 100.0
			integer "density_read_mode",
				#: default 1
				#: enum "ASCII Single Value:Binary Only Red:Binary Max RGB:ASCII Uintah"
			string "temperature_file",
			string "temperature_file_first",
				#: hidden true
			scalar "temperature_scale",
				#: default 500
				#: softmin 0.0
				#: softmax 10000.0
			scalar "temperature_offset",
				#: default 0
				#: softmin 0.0
				#: softmax 100.0
			integer "temperature_read_mode",
				#: default 2
				#: enum "ASCII Single Value:Binary Only Red:Binary Max RGB:ASCII Uintah"				
			integer "interpolation_mode",
				#: default 1
				#: enum "None:Trilinear"
			integer "fuel_type",
				#: default 1
				#: enum "Black Body:Propane:Acetylene:Copper-Green:Sulfur-Purple"
				#: hidden true
			scalar "visual_adaptation_factor",
				#: default 0.0
				#: min 0.0
				#: max 1.0	
			scalar "intensity",
				#: default 1.0
				#: softmin 0.0
				#: softmax 10.0
				#: min 0.0	
			scalar "shadow_threshold",
				#: default 0.005
				#: softmin 0.0
				#: softmax 0.01	
			scalar "decay",
				#: default 2.0
				#: softmin 0.0
				#: softmax 3.0
				#: min 0.0					
			scalar "march_increment", 
				#: default 0.05
				#: softmin 0.0
				#: softmax 1.0
				#: min 0.0
			boolean "cast_shadows",
				#: default false
			array light "lights",
				)
	apply volume
	version 2
end declare


# Volumetric fire light

declare shader
	color "fire_volume_light" (
		shader "bb_shader",
		shader "sigma_a_shader",
		integer "fuel_type",
			#: default 1
			#: enum "Black Body:Propane:Acetylene:Copper-Green:Sulfur-Purple"
			#: hidden true
		scalar "temperature_scale", 
			#: default 500
			#: softmin 0.0
			#: softmax 10000.0
		scalar "temperature_offset",
			#: default 0 
			#: softmin 0.0
			#: softmax 1000.0
		scalar "visual_adaptation_factor",
			#: default 0.0
			#: min 0.0
			#: max 1.0			
		scalar "shadow_threshold",
			#: default 0.005
			#: softmin 0.0
			#: softmax 0.01
		scalar "intensity",
			#: default 1.0
			#: softmin 0.0
			#: softmax 10.0
			#: min 0.0
		scalar "decay",
			#: default 2.0
			#: softmin 0.0
			#: softmax 3.0
			#: min 0.0
	)
	version 1
	apply light
end declare

$endif # if not "mental_ray_fire_shader_included"
