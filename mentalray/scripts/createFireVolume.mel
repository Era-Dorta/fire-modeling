proc int numFilesInFolder(string $fileNamePath){
	$directory = `dirname( $fileNamePath)`;
	$fileShort = `stringRemovePrefix $fileNamePath $directory`;
	$filelist = `getFileList -folder $directory -filespec ($fileShort + "*")`;
	$filesize = `size $filelist`;
	return $filesize;
}

proc string fireFileNameNoNumber(string $filename){
	// Separate filename in name and extension
	$tokenFilename = `stringToStringArray $filename "."`;
	
	// If the file has several dots, puts the parts together
	$tokeNum = `size $tokenFilename`;
	for( $i=1; $i<$tokeNum-1; ++$i )
	{
		$tokenFilename[0] = $tokenFilename[0] + "." + $tokenFilename[$i];
	}
	$tokenFilename[1] = $tokenFilename[$tokeNum - 1];
	
	// Get the file number
	string $numberExpr = "[0-9]+$"; // A bunch of digits at the end of the string
	string $fileNumberStr = `match $numberExpr $tokenFilename[0]`;
	$fileNumberSize = `size $fileNumberStr`;
	
	// Get the name without the numbers
	$nameSize = `size $tokenFilename[0]`;
	$nameSize = $nameSize - $fileNumberSize;
	$fileName = `substring $tokenFilename[0] 1 $nameSize`;
	
	return $fileName;
}

global proc string createFireVolume( string $temperature_file, string $density_file){
	select -cl; // Clear selection
	
	// Get project relative and absolute paths for the files
	$temp_file_abs = `workspace -expandName $temperature_file`;
	$dens_file_abs = `workspace -expandName $density_file`;
	
	$temp_file_rel = `workspace -projectPath $temperature_file`;
	$dens_file_rel = `workspace -projectPath $density_file`;

	// Create an UI control node
	$fire_control = `createNode "FireControlNode" -n "fire_control"`;

	// Create all the shading nodes
	$fire_shader = `shadingNode -name "fire_volume_shader" -asShader "fire_volume"`;
	$fireSG = `sets -renderable true -noSurfaceShader true -empty -name ($fire_shader + "SG")`;
	$temperature_shader = `shadingNode -name "temperature_shader" -asUtility "voxel_density"`;
	$density_shader = `shadingNode -name "density_shader" -asUtility "voxel_density"`;
	$black_body_shader = `shadingNode -name "black_body_shader" -asUtility "voxel_rgb_value"`;
	$absorption_shader = `shadingNode -name "absorption_shader" -asUtility "voxel_rgb_value"`;
	$fire_light_shader = `shadingNode -name "fire_light_shader" -asUtility "fire_volume_light"`;

	// Create the cube volume
	createImplicitVolume "cube";
	string $select_list[] = `ls -selection`;
	string $cube = $select_list[0];

	// Create an area light
	defaultAreaLight(1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0);
	string $select_list[] = `ls -selection`;
	string $area_light = $select_list[0];

	// Set the files paths in the control
	setAttr -type "string" ($fire_control + ".temperature_file") $temperature_file;
	setAttr -type "string" ($fire_control + ".density_file") $density_file;
	
	setAttr -type "string" ($fire_control + ".temperature_file_first") $temperature_file;
	setAttr -type "string" ($fire_control + ".density_file_first") $density_file;
	
	// Fire shader as volume shader for the shading group
	connectAttr -f ($fire_shader + ".message") ($fireSG + ".volumeShader");

	// Connect the voxel readers with the intermediate shading nodes
	connectAttr -f ($temperature_shader + ".message") ($black_body_shader + ".temperature_shader");
	connectAttr -f ($density_shader + ".message") ($black_body_shader + ".density_shader");

	connectAttr -f ($temperature_shader + ".message") ($absorption_shader + ".temperature_shader");
	connectAttr -f ($density_shader + ".message") ($absorption_shader + ".density_shader");

	// Connections to the final shaders
	connectAttr -f ($absorption_shader + ".message") ($fire_shader + ".absorption_shader");
	connectAttr -f ($black_body_shader + ".message") ($fire_shader + ".emission_shader");
	connectAttr -f ($density_shader + ".message") ($fire_shader + ".density_shader");

	connectAttr -f ($black_body_shader + ".message") ($fire_light_shader + ".bb_shader");
	connectAttr -f ($absorption_shader + ".message") ($fire_light_shader + ".sigma_a_shader");

	// Fire light shader as light shader of the light
	connectAttr -f ($fire_light_shader + ".message") ($area_light + ".miLightShader");

	// Connect the control to the inputs of the shaders, so that they change together
	connectAttr -f ($fire_control + ".density_file_out") ($density_shader + ".filename");
	connectAttr -f ($fire_control + ".temperature_file_out") ($temperature_shader + ".filename");
	
	connectAttr -f ($fire_control + ".interpolation_mode_out") ($absorption_shader + ".interpolation_mode");
	connectAttr -f ($fire_control + ".interpolation_mode_out") ($black_body_shader + ".interpolation_mode");
	connectAttr -f ($fire_control + ".interpolation_mode_out") ($density_shader + ".interpolation_mode");
	connectAttr -f ($fire_control + ".interpolation_mode_out") ($temperature_shader + ".interpolation_mode");

	connectAttr -f ($fire_control + ".visual_adaptation_factor_out") ($absorption_shader + ".visual_adaptation_factor");
	connectAttr -f ($fire_control + ".visual_adaptation_factor_out") ($black_body_shader + ".visual_adaptation_factor");

	connectAttr -f ($fire_control + ".fuel_type_out") ($absorption_shader + ".fuel_type");
	connectAttr -f ($fire_control + ".fuel_type_out") ($black_body_shader + ".fuel_type");
	connectAttr -f ($fire_control + ".fuel_type_out") ($fire_light_shader + ".fuel_type");
	connectAttr -f ($fire_control + ".fuel_type_out") ($fire_shader + ".fuel_type");

	connectAttr -f ($fire_control + ".temperature_scale_out") ($temperature_shader + ".scale");
	connectAttr -f ($fire_control + ".temperature_offset_out") ($temperature_shader + ".offset");
	
	connectAttr -f ($fire_control + ".density_scale_out") ($density_shader + ".scale");
	connectAttr -f ($fire_control + ".density_offset_out") ($density_shader + ".offset");
	
	connectAttr -f ($fire_control + ".density_read_mode_out") ($density_shader + ".read_mode");
	connectAttr -f ($fire_control + ".temperature_read_mode_out") ($temperature_shader + ".read_mode");
	
	connectAttr -f ($fire_control + ".intensity_out") ($fire_light_shader + ".intensity");
	connectAttr -f ($fire_control + ".shadow_threshold_out") ($fire_light_shader + ".shadow_threshold");
	connectAttr -f ($fire_control + ".decay_out") ($fire_light_shader + ".decay");
	
	connectAttr -f ($fire_control + ".high_samples_out") ($fire_light_shader + ".high_samples");
	connectAttr -f ($fire_control + ".high_samples_out") ($area_light + ".areaHiSamples");
	connectAttr -f ($fire_control + ".high_samples") ($fire_shader + ".high_samples");

	connectAttr -f ($fire_control + ".march_increment_out") ($fire_shader + ".march_increment");
	connectAttr -f ($fire_control + ".cast_shadows_out") ($fire_shader + ".cast_shadows");
	
	// Fire volume will only be illuminated by its own light
	connectAttr ($area_light + ".message") ($fire_shader + ".lights[0]");

	// Set computation type for the intermediate shaders, this value defines the kind output
	setAttr ($black_body_shader + ".compute_mode") 0;
	setAttr ($absorption_shader + ".compute_mode") 1;

	// Set the material of the cube to be the Shading Group 
	select -r $cube;
	sets -forceElement $fireSG;

	// Activate mental ray light type and custom light shader
	setAttr ($area_light + ".areaLight") 1;
	setAttr ($area_light + ".areaType") 4;

	// Make the cube and the light to be one object
	string $cube_transform = `firstParentOf $cube`;
	select -r $area_light $cube_transform;
	parent -s -r;

	// Lock all the transformations in the light
	setAttr -l true { ($area_light + ".t") };
	setAttr -l true { ($area_light + ".r") };
	setAttr -l true { ($area_light + ".s") };
	setAttr -l true { ($area_light + ".sh") };

	// Launch a script to update the file names
	$updateScript = "fireFrameUpdate( \"" + $fire_control + "\");";
	$expression_name = ($fire_control + "FrameUpdate");
	expression -string $updateScript -object $fire_control -name $expression_name -alwaysEvaluate 1;
	
	// Set the total number of frames of the playback bar
	$fileNameNPath = `fireFileNameNoNumber $dens_file_abs`;
	$maxNumberDataFiles = `numFilesInFolder $fileNameNPath`;
	
	$fileNameNPath = `fireFileNameNoNumber $temp_file_abs`;
	$temperatureNumberDataFiles = `numFilesInFolder $fileNameNPath`;
	
	if($maxNumberDataFiles < $temperatureNumberDataFiles){
		$maxNumberDataFiles = $temperatureNumberDataFiles;
	}
	
	$currentMaxFrame = `playbackOptions -query -maxTime`;
	
	// If we have less data, then make the play bar smaller
	if($currentMaxFrame > $maxNumberDataFiles){
		playbackOptions -maxTime $maxNumberDataFiles;
	}
	
	select -r $fire_control;
	return $cube_transform;
}
